// Behavioral Analysis - Interactive malware behavior simulation

import React, { useState } from 'react';
import { motion } from 'framer-motion';
import { EyeIcon, CheckCircleIcon, XCircleIcon, PlayIcon } from '@heroicons/react/24/outline';

const BehaviorAnalysisSection: React.FC = () => {
  const [simRunning, setSimRunning] = useState(false);
  const [behaviorLog, setBehaviorLog] = useState<string[]>([]);
  const [detectionQuiz, setDetectionQuiz] = useState<string[]>([]);
  const [detectionSubmitted, setDetectionSubmitted] = useState(false);
  const [selectedSample, setSelectedSample] = useState('ransomware');

  const samples = {
    ransomware: {
      name: 'üîí Ransomware Sample',
      logs: [
        '[0.1s] üîç Process started: backup_tool.exe',
        '[0.3s] üìÇ Enumerating user documents...',
        '[0.5s] üîë Generating encryption keys...',
        '[0.8s] ‚ö†Ô∏è WARNING: Mass file encryption detected!',
        '[1.0s] üìÑ Encrypting: Documents/*.docx ‚Üí *.locked',
        '[1.3s] üìÑ Encrypting: Pictures/*.jpg ‚Üí *.locked',
        '[1.5s] üóëÔ∏è Deleting shadow copies (Volume Shadow Service)',
        '[1.8s] üìù Creating ransom note: READ_ME.txt',
        '[2.0s] üì° Contacting C2 server: 198.51.100.50:443',
        '[2.3s] üí∞ Displaying ransom message: Pay 1 BTC to decrypt',
        '[2.5s] ‚õî BLOCKED by EDR - File encryption prevented'
      ],
      maliciousActions: ['encryption', 'shadows', 'ransom', 'c2']
    },
    trojan: {
      name: 'üê¥ Trojan Sample',
      logs: [
        '[0.1s] üîç Process started: game_installer.exe',
        '[0.3s] üì¶ Installing legitimate game files...',
        '[0.5s] ‚úÖ Game installation: 45% complete',
        '[0.8s] üö® HIDDEN: Dropping backdoor.dll to system32',
        '[1.0s] üîë Creating registry persistence key',
        '[1.3s] üëÅÔ∏è Injecting keylogger into explorer.exe',
        '[1.5s] üì° Opening backdoor on port 4444',
        '[1.8s] üì§ Exfiltrating browser passwords',
        '[2.0s] ü§ñ Joining botnet: connecting to command server',
        '[2.3s] ‚è∞ Scheduling task for persistence',
        '[2.5s] ‚õî DETECTED - Quarantined by antivirus'
      ],
      maliciousActions: ['backdoor', 'keylogger', 'exfiltrate', 'botnet']
    },
    spyware: {
      name: 'üëÅÔ∏è Spyware Sample',
      logs: [
        '[0.1s] üîç Process started: system_update.exe',
        '[0.3s] üé§ Requesting microphone permissions...',
        '[0.5s] üì∑ Requesting camera permissions...',
        '[0.8s] üëÅÔ∏è Starting screen capture every 30 seconds',
        '[1.0s] ‚å®Ô∏è Installing keylogger hooks',
        '[1.3s] üìã Monitoring clipboard for passwords/credit cards',
        '[1.5s] üåê Intercepting browser cookies and sessions',
        '[1.8s] üì° Uploading surveillance data to 203.0.113.25',
        '[2.0s] üìç Tracking GPS location data',
        '[2.3s] üìß Harvesting email credentials',
        '[2.5s] ‚õî BLOCKED by privacy protection software'
      ],
      maliciousActions: ['screen', 'keylogger', 'clipboard', 'upload']
    }
  };

  const runSimulation = () => {
    setSimRunning(true);
    setBehaviorLog([]);
    setDetectionQuiz([]);
    setDetectionSubmitted(false);
    
    const logs = samples[selectedSample as keyof typeof samples].logs;
    let index = 0;
    const interval = setInterval(() => {
      if (index < logs.length) {
        setBehaviorLog(prev => [...prev, logs[index]]);
        index++;
      } else {
        clearInterval(interval);
        setSimRunning(false);
      }
    }, 300);
  };

  const toggleDetection = (value: string) => {
    if (detectionQuiz.includes(value)) {
      setDetectionQuiz(detectionQuiz.filter(v => v !== value));
    } else {
      setDetectionQuiz([...detectionQuiz, value]);
    }
  };

  const checkDetection = () => setDetectionSubmitted(true);

  const currentSample = samples[selectedSample as keyof typeof samples];
  const allCorrect = currentSample.maliciousActions.every(action => 
    detectionQuiz.includes(action)
  ) && detectionQuiz.length === currentSample.maliciousActions.length;

  return (
    <div className="space-y-6">
      <div className="bg-atom-bg bg-opacity-50 rounded-lg p-6 border-l-4 border-atom-blue">
        <h3 className="text-2xl font-bold text-atom-blue mb-4 flex items-center">
          <EyeIcon className="h-8 w-8 mr-3" />
          Behavioral Analysis in Action
        </h3>
        <p className="text-lg text-atom-fg-muted mb-4">
          Behavioral analysis involves running malware in a controlled environment (sandbox) and 
          watching what it does. This reveals its true intentions, even if the code is heavily 
          obfuscated or encrypted!
        </p>
      </div>

      <div className="bg-purple-900 bg-opacity-20 rounded-lg p-6 border border-purple-500 border-opacity-30">
        <h4 className="text-purple-400 font-bold text-xl mb-3">üîç What We Monitor</h4>
        <div className="grid md:grid-cols-3 gap-4 text-sm">
          <div className="bg-purple-900 bg-opacity-20 p-3 rounded">
            <p className="text-purple-300 font-bold mb-2">File System</p>
            <ul className="text-purple-300 space-y-1 text-xs">
              <li>‚Ä¢ Files created/modified</li>
              <li>‚Ä¢ Directories accessed</li>
              <li>‚Ä¢ Encryption activity</li>
            </ul>
          </div>
          <div className="bg-purple-900 bg-opacity-20 p-3 rounded">
            <p className="text-purple-300 font-bold mb-2">Registry & System</p>
            <ul className="text-purple-300 space-y-1 text-xs">
              <li>‚Ä¢ Registry modifications</li>
              <li>‚Ä¢ Services created</li>
              <li>‚Ä¢ Scheduled tasks</li>
            </ul>
          </div>
          <div className="bg-purple-900 bg-opacity-20 p-3 rounded">
            <p className="text-purple-300 font-bold mb-2">Network Activity</p>
            <ul className="text-purple-300 space-y-1 text-xs">
              <li>‚Ä¢ DNS queries</li>
              <li>‚Ä¢ IP connections</li>
              <li>‚Ä¢ Data exfiltration</li>
            </ul>
          </div>
        </div>
      </div>

      <div className="bg-atom-bg bg-opacity-50 rounded-lg p-6 border border-atom-orange border-opacity-30">
        <h4 className="text-atom-orange font-bold text-xl mb-4">üß™ Interactive Sandbox Simulation</h4>
        <p className="text-atom-fg-muted mb-4">
          Choose a malware sample to analyze and watch its behavior unfold:
        </p>

        <div className="mb-4">
          <label className="block text-atom-blue font-bold mb-2">Select Malware Sample:</label>
          <div className="grid md:grid-cols-3 gap-2">
            {Object.entries(samples).map(([key, sample]) => (
              <button
                key={key}
                onClick={() => {
                  setSelectedSample(key);
                  setBehaviorLog([]);
                  setDetectionQuiz([]);
                  setDetectionSubmitted(false);
                }}
                className={`p-3 rounded transition-colors ${
                  selectedSample === key
                    ? 'bg-atom-orange text-white border-2 border-atom-orange'
                    : 'bg-atom-bg text-atom-fg border border-atom-fg-muted hover:bg-opacity-70'
                }`}
              >
                {sample.name}
              </button>
            ))}
          </div>
        </div>

        <button
          onClick={runSimulation}
          disabled={simRunning || behaviorLog.length > 0}
          className="px-6 py-3 bg-atom-orange text-white rounded-lg hover:bg-opacity-80 transition-colors font-bold disabled:opacity-50 flex items-center space-x-2"
        >
          <PlayIcon className="h-5 w-5" />
          <span>{behaviorLog.length > 0 ? 'Analysis Complete' : 'Run in Sandbox'}</span>
        </button>

        {(simRunning || behaviorLog.length > 0) && (
          <motion.div
            initial={{ opacity: 0 }}
            animate={{ opacity: 1 }}
            className="mt-4 bg-black bg-opacity-70 rounded-lg p-4 border-2 border-green-500"
          >
            <div className="flex items-center justify-between mb-3">
              <div className="text-green-400 font-mono font-bold">
                ‚ïê‚ïê‚ïê SANDBOX MONITOR ‚ïê‚ïê‚ïê
              </div>
              {simRunning && (
                <div className="flex items-center space-x-2">
                  <div className="w-2 h-2 bg-red-500 rounded-full animate-pulse"></div>
                  <span className="text-red-400 text-sm font-mono">RECORDING</span>
                </div>
              )}
            </div>
            <div className="space-y-1 max-h-96 overflow-y-auto font-mono text-sm">
              {behaviorLog.map((log, index) => (
                <motion.div
                  key={index}
                  initial={{ opacity: 0, x: -20 }}
                  animate={{ opacity: 1, x: 0 }}
                  className={`${
                    log.includes('üö®') || log.includes('‚ö†Ô∏è') ? 'text-red-400 font-bold' :
                    log.includes('‚õî') ? 'text-red-500 font-bold' :
                    log.includes('‚úÖ') ? 'text-green-400' :
                    log.includes('HIDDEN') || log.includes('WARNING') ? 'text-yellow-400' :
                    'text-cyan-400'
                  }`}
                >
                  {log}
                </motion.div>
              ))}
            </div>
            {behaviorLog.length > 0 && !simRunning && (
              <button
                onClick={() => {
                  setBehaviorLog([]);
                  setDetectionQuiz([]);
                  setDetectionSubmitted(false);
                }}
                className="mt-4 px-4 py-2 bg-atom-blue text-white rounded hover:bg-opacity-80 transition-colors text-sm"
              >
                Reset & Try Another Sample
              </button>
            )}
          </motion.div>
        )}
      </div>

      {behaviorLog.length > 0 && !simRunning && (
        <motion.div
          initial={{ opacity: 0, y: 20 }}
          animate={{ opacity: 1, y: 0 }}
          className="bg-atom-bg bg-opacity-50 rounded-lg p-6 border border-atom-purple border-opacity-30"
        >
          <h4 className="text-atom-purple font-bold text-xl mb-4">üéØ Analysis Challenge</h4>
          <p className="text-atom-fg-muted mb-4">
            Based on the observed behavior, identify ALL the malicious actions. Select all that apply:
          </p>

          <div className="space-y-2 mb-4">
            {selectedSample === 'ransomware' && [
              { value: 'encryption', text: 'Mass file encryption of user documents', correct: true },
              { value: 'shadows', text: 'Deleting Volume Shadow copies (backups)', correct: true },
              { value: 'ransom', text: 'Creating ransom note demanding payment', correct: true },
              { value: 'c2', text: 'Contacting command & control server', correct: true },
              { value: 'normal', text: 'Enumerating documents (can be normal behavior)', correct: false }
            ].map(option => (
              <label
                key={option.value}
                className={`flex items-center space-x-3 p-3 rounded cursor-pointer transition-colors ${
                  detectionQuiz.includes(option.value)
                    ? 'bg-atom-purple bg-opacity-20 border-2 border-atom-purple'
                    : 'bg-atom-bg border-2 border-transparent hover:bg-opacity-70'
                }`}
              >
                <input
                  type="checkbox"
                  value={option.value}
                  checked={detectionQuiz.includes(option.value)}
                  onChange={() => toggleDetection(option.value)}
                  className="text-atom-purple w-4 h-4"
                />
                <span className="text-atom-fg text-sm">{option.text}</span>
              </label>
            ))}

            {selectedSample === 'trojan' && [
              { value: 'backdoor', text: 'Dropping backdoor to system directory', correct: true },
              { value: 'keylogger', text: 'Injecting keylogger into explorer.exe', correct: true },
              { value: 'exfiltrate', text: 'Stealing browser passwords', correct: true },
              { value: 'botnet', text: 'Joining botnet command network', correct: true },
              { value: 'game', text: 'Installing game files (legitimate cover)', correct: false }
            ].map(option => (
              <label
                key={option.value}
                className={`flex items-center space-x-3 p-3 rounded cursor-pointer transition-colors ${
                  detectionQuiz.includes(option.value)
                    ? 'bg-atom-purple bg-opacity-20 border-2 border-atom-purple'
                    : 'bg-atom-bg border-2 border-transparent hover:bg-opacity-70'
                }`}
              >
                <input
                  type="checkbox"
                  value={option.value}
                  checked={detectionQuiz.includes(option.value)}
                  onChange={() => toggleDetection(option.value)}
                  className="text-atom-purple w-4 h-4"
                />
                <span className="text-atom-fg text-sm">{option.text}</span>
              </label>
            ))}

            {selectedSample === 'spyware' && [
              { value: 'screen', text: 'Capturing screenshots periodically', correct: true },
              { value: 'keylogger', text: 'Installing keyboard logging hooks', correct: true },
              { value: 'clipboard', text: 'Monitoring clipboard for sensitive data', correct: true },
              { value: 'upload', text: 'Uploading surveillance data to remote server', correct: true },
              { value: 'perms', text: 'Requesting permissions (normal for apps)', correct: false }
            ].map(option => (
              <label
                key={option.value}
                className={`flex items-center space-x-3 p-3 rounded cursor-pointer transition-colors ${
                  detectionQuiz.includes(option.value)
                    ? 'bg-atom-purple bg-opacity-20 border-2 border-atom-purple'
                    : 'bg-atom-bg border-2 border-transparent hover:bg-opacity-70'
                }`}
              >
                <input
                  type="checkbox"
                  value={option.value}
                  checked={detectionQuiz.includes(option.value)}
                  onChange={() => toggleDetection(option.value)}
                  className="text-atom-purple w-4 h-4"
                />
                <span className="text-atom-fg text-sm">{option.text}</span>
              </label>
            ))}
          </div>

          <button
            onClick={checkDetection}
            disabled={detectionQuiz.length === 0}
            className="px-6 py-2 bg-atom-purple text-white rounded hover:bg-opacity-80 transition-colors disabled:opacity-50"
          >
            Submit Analysis
          </button>

          {detectionSubmitted && (
            <motion.div
              initial={{ opacity: 0 }}
              animate={{ opacity: 1 }}
              className={`mt-4 p-4 rounded ${
                allCorrect
                  ? 'bg-green-900 bg-opacity-20 border border-green-500'
                  : 'bg-yellow-900 bg-opacity-20 border border-yellow-500'
              }`}
            >
              {allCorrect ? (
                <div className="text-green-400">
                  <CheckCircleIcon className="h-6 w-6 inline mr-2" />
                  <span className="font-bold">Perfect analysis! üéØ</span>
                  <p className="text-sm mt-2">
                    You correctly identified all malicious behaviors! This skill helps security 
                    analysts detect and respond to real threats.
                  </p>
                </div>
              ) : (
                <div className="text-yellow-300">
                  <XCircleIcon className="h-6 w-6 inline mr-2" />
                  <span className="font-bold">Review the behaviors carefully</span>
                  <p className="text-sm mt-2">
                    Focus on actions that are clearly malicious: encryption, data theft, persistence 
                    mechanisms, and unauthorized network activity.
                  </p>
                </div>
              )}
            </motion.div>
          )}
        </motion.div>
      )}

      <div className="bg-green-900 bg-opacity-20 rounded-lg p-6 border border-green-500 border-opacity-30">
        <h4 className="text-green-400 font-bold text-xl mb-3">üéì Key Takeaways</h4>
        <ul className="space-y-2 text-green-300">
          <li>‚úì <strong>Behavioral analysis</strong> reveals malware's true intentions by watching actions</li>
          <li>‚úì <strong>Sandboxes</strong> provide safe, isolated environments for testing</li>
          <li>‚úì <strong>Malicious indicators</strong> include persistence, data theft, and C2 communication</li>
          <li>‚úì <strong>Normal behaviors</strong> can mask malicious intent (Trojan horse technique)</li>
        </ul>
      </div>
    </div>
  );
};

export default BehaviorAnalysisSection;
